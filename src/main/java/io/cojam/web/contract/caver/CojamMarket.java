package io.cojam.web.contract.caver;

import com.klaytn.caver.Caver;
import com.klaytn.caver.crypto.KlayCredentials;
import com.klaytn.caver.methods.response.KlayLogs;
import com.klaytn.caver.methods.response.KlayTransactionReceipt;
import com.klaytn.caver.tx.SmartContract;
import com.klaytn.caver.tx.manager.TransactionManager;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.tuples.generated.Tuple11;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated smart contract code.
 * <p><strong>Do not modify!</strong>
 */
public class CojamMarket extends SmartContract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b506040516137733803806137738339818101604052602081101561003357600080fd5b5051600580546001600160a01b031916339081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600780546001600160a01b0319166001600160a01b03929092169190911790556136cf806100a46000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063c68feb881161007c578063c68feb881461063f578063d791de631461065c578063dd8441ab146106fd578063eb44fdd314610720578063f2fde38b1461089d578063fed6b657146108c357610142565b8063715018a6146105155780637ef1c3c71461051d5780638a48ac03146105605780638da5cb5b1461059c578063b5ab58dc146105c057610142565b806346ab0a9d1161010a57806346ab0a9d146103f9578063486ce80c1461042e5780635016128e14610486578063567bb0b6146104ac578063588359b0146104db5780635f25f51a146104f857610142565b806309f29d1b1461014757806316220f9b146101785780632976789c146101ef57806342e488121461021e57806342f6208e14610308575b600080fd5b6101646004803603602081101561015d57600080fd5b50356108e6565b604080519115158252519081900360200190f35b6101646004803603604081101561018e57600080fd5b810190602081018135600160201b8111156101a857600080fd5b8201836020820111156101ba57600080fd5b803590602001918460018302840111600160201b831117156101db57600080fd5b9193509150356001600160a01b03166109e8565b6101646004803603608081101561020557600080fd5b5080359060208101359060408101359060600135610aee565b610164600480360361010081101561023557600080fd5b8135916001600160a01b0360208201351691810190606081016040820135600160201b81111561026457600080fd5b82018360208201111561027657600080fd5b803590602001918460018302840111600160201b8311171561029757600080fd5b9193909282359260208101359260408201359260608301359260a081019060800135600160201b8111156102ca57600080fd5b8201836020820111156102dc57600080fd5b803590602001918460208302840111600160201b831117156102fd57600080fd5b509092509050610c3a565b6103a96004803603602081101561031e57600080fd5b810190602081018135600160201b81111561033857600080fd5b82018360208201111561034a57600080fd5b803590602001918460208302840111600160201b8311171561036b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610df9945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103e55781810151838201526020016103cd565b505050509050019250505060405180910390f35b61041c6004803603604081101561040f57600080fd5b5080359060200135610fa3565b60408051918252519081900360200190f35b61044b6004803603602081101561044457600080fd5b5035610fb8565b604080519687526020870195909552858501939093526001600160a01b039091166060850152608084015260a0830152519081900360c00190f35b6101646004803603602081101561049c57600080fd5b50356001600160a01b0316610ffc565b610164600480360360808110156104c257600080fd5b5080359060208101359060408101359060600135611007565b610164600480360360208110156104f157600080fd5b50356111a6565b6101646004803603602081101561050e57600080fd5b5035611237565b6101646112c8565b61053a6004803603602081101561053357600080fd5b5035611323565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61056861135f565b604080516001600160a01b039586168152938516602085015291841683830152909216606082015290519081900360800190f35b6105a461137b565b604080516001600160a01b039092168252519081900360200190f35b6105dd600480360360208110156105d657600080fd5b503561138a565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610629578181015183820152602001610611565b5050505090500194505050505060405180910390f35b6101646004803603602081101561065557600080fd5b50356113bd565b6103a96004803603602081101561067257600080fd5b810190602081018135600160201b81111561068c57600080fd5b82018360208201111561069e57600080fd5b803590602001918460208302840111600160201b831117156106bf57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506113c8945050505050565b6101646004803603604081101561071357600080fd5b508035906020013561156d565b61073d6004803603602081101561073657600080fd5b50356116f9565b604051808c8152602001806020018b6001600160a01b0316815260200180602001806020018a815260200189815260200188815260200187815260200186815260200185815260200184810384528e818151815260200191508051906020019080838360005b838110156107bb5781810151838201526020016107a3565b50505050905090810190601f1680156107e85780820380516001836020036101000a031916815260200191505b5084810383528c5181528c516020918201918e019080838360005b8381101561081b578181015183820152602001610803565b50505050905090810190601f1680156108485780820380516001836020036101000a031916815260200191505b5084810382528b5181528b51602091820191808e01910280838360005b8381101561087d578181015183820152602001610865565b505050509050019e50505050505050505050505050505060405180910390f35b610164600480360360208110156108b357600080fd5b50356001600160a01b0316611786565b610164600480360360408110156108d957600080fd5b5080359060200135611820565b6005546000906001600160a01b031633146109325760405162461bcd60e51b815260040180806020018281038252602f81526020018061345f602f913960400191505060405180910390fd5b61093b826118b0565b6109765760405162461bcd60e51b81526004018080602001828103825260308152602001806133986030913960400191505060405180910390fd5b6000828152600260205260409020600c810154600a546109a19083906001600160a01b0316836119d1565b604080518581526020810183905281517fbf004399565ddf6633fe779f298281a0357558f9b0f968e99b32c9b0bd89d369929181900390910190a16001925050505b919050565b6005546000906001600160a01b03163314610a345760405162461bcd60e51b815260040180806020018281038252602f81526020018061345f602f913960400191505060405180910390fd5b7f1f7c86bf84a9b55687467c9cdbec7f225b9e7949eabe6538a58e67453c90b5808484846040518080602001836001600160a01b031681526020018281038252858582818152602001925080828437600083820152604051601f909101601f1916909201829003965090945050505050a1610ae684848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250611a6c915050565b949350505050565b600084848484610b1d8460405180604001604052806007815260200166617070726f766560c81b815250611ce6565b8015610b2e5750610b2e8484611de5565b8015610b4b575060008381526003602052604090206002015460ff165b8015610b69575060008281526004602052604090206005015460ff16155b610ba45760405162461bcd60e51b815260040180806020018281038252602881526020018061364e6028913960400191505060405180910390fd5b600754604080516370a0823160e01b8152336004820152905188926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610bee57600080fd5b505afa158015610c02573d6000803e3d6000fd5b505050506040513d6020811015610c1857600080fd5b50511015610c295760009450610c2e565b600194505b50505050949350505050565b6005546000906001600160a01b03163314610c865760405162461bcd60e51b815260040180806020018281038252602f81526020018061345f602f913960400191505060405180910390fd5b610d1f8b8b8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820182526007815266617070726f766560c81b60208083019190915282518b820281810183019094528b81529194508f93508e928e928e9290918e918e918291850190849080828437600092019190915250611e0292505050565b7fa3d15bf08fbde3038226032bbefb0bbc3c94543485d2fd8d3cf4a085f0bd03aa8b8a8a8d8b8b8b8b8b8b604051808b815260200180602001896001600160a01b031681526020018881526020018781526020018681526020018581526020018060200183810383528c8c82818152602001925080828437600083820152601f01601f19169091018481038352858152602090810191508690860280828437600083820152604051601f909101601f19169092018290039e50909c50505050505050505050505050a15060019a9950505050505050505050565b6005546060906001600160a01b03163314610e455760405162461bcd60e51b815260040180806020018281038252602f81526020018061345f602f913960400191505060405180910390fd5b6060825167ffffffffffffffff81118015610e5f57600080fd5b50604051908082528060200260200182016040528015610e89578160200160208202803683370190505b50905060005b8351811015610f9c57838181518110610ea457fe5b60209081029190910101516005546001600160a01b0390811691161415610f07576040805162461bcd60e51b815260206004820152601260248201527131b0b7103737ba103637b1b59037bbb732b960711b604482015290519081900360640190fd5b610f23848281518110610f1657fe5b602002602001015161213f565b828281518110610f2f57fe5b6020026020010190151590811515815250507f169aadf55dc2098830ccf9f334e3ce3933b6e895b9114fc9f49242f2be61fe8e848281518110610f6e57fe5b602002602001015160405180826001600160a01b0316815260200191505060405180910390a1600101610e8f565b5092915050565b6000610faf8383612191565b90505b92915050565b600080600080600080610fc961318a565b610fd2886123b4565b8051602082015160408301516060840151608090940151929c919b9a509850919650945092505050565b6000610fb282612472565b6000848484846110368460405180604001604052806007815260200166617070726f766560c81b815250611ce6565b801561104757506110478484611de5565b8015611064575060008381526003602052604090206002015460ff165b8015611082575060008281526004602052604090206005015460ff16155b6110bd5760405162461bcd60e51b815260040180806020018281038252602881526020018061364e6028913960400191505060405180910390fd5b6110ca898989338a612490565b600754604080516323b872dd60e01b81523360048201523060248201526044810189905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b15801561112457600080fd5b505af1158015611138573d6000803e3d6000fd5b505050506040513d602081101561114e57600080fd5b5050604080518a8152602081018a90528082018990526060810188905290517f9081ce9d818a5e04f71a33279791ee023291ecd76fe89b7cf1eafcaae0e8290d9181900360800190a150600198975050505050505050565b6005546000906001600160a01b031633146111f25760405162461bcd60e51b815260040180806020018281038252602f81526020018061345f602f913960400191505060405180910390fd5b6111fb8261258a565b506040805183815290517f84559d4021c16877e4575b5ef6db96bb82e953e6d7ef199822aa24bc981410739181900360200190a1506001919050565b6005546000906001600160a01b031633146112835760405162461bcd60e51b815260040180806020018281038252602f81526020018061345f602f913960400191505060405180910390fd5b61128c82612640565b506040805183815290517f08ad4b8c34ee57b9e19a0aa2349b5962188beca5180d3ae0d9539b915eeb90889181900360200190a1506001919050565b6005546000906001600160a01b031633146113145760405162461bcd60e51b815260040180806020018281038252602f81526020018061345f602f913960400191505060405180910390fd5b61131e60006126ec565b905090565b6000806000806113316131cb565b61133a8661274f565b6060810151608082015160a083015160c0909301519199909850919650945092505050565b60008060008061136d612980565b935093509350935090919293565b6005546001600160a01b031690565b600080606061139761324c565b6113a0856129a5565b8051909150856113af81612a3b565b935093509350509193909250565b6000610fb2826118b0565b6005546060906001600160a01b031633146114145760405162461bcd60e51b815260040180806020018281038252602f81526020018061345f602f913960400191505060405180910390fd5b6060825167ffffffffffffffff8111801561142e57600080fd5b50604051908082528060200260200182016040528015611458578160200160208202803683370190505b50905060005b8351811015610f9c5783818151811061147357fe5b60209081029190910101516005546001600160a01b03908116911614156114d8576040805162461bcd60e51b815260206004820152601460248201527331b0b7103737ba103ab73637b1b59037bbb732b960611b604482015290519081900360640190fd5b6114f48482815181106114e757fe5b6020026020010151612a46565b82828151811061150057fe5b6020026020010190151590811515815250507f687691c08a3e67a160ba20a32cb1c56791955f12c5ff5d5fcf62bc456ad79ea184828151811061153f57fe5b602002602001015160405180826001600160a01b0316815260200191505060405180910390a160010161145e565b6005546000906001600160a01b031633146115b95760405162461bcd60e51b815260040180806020018281038252602f81526020018061345f602f913960400191505060405180910390fd5b6115c38383612a93565b506000838152600260205260408120600c810154600482015491929091611607906115fc906064906115f6908690612b8d565b90612be4565b600385015490612c0e565b9050600061162760646115f6866005015486612b8d90919063ffffffff16565b9050600061164760646115f6876006015487612b8d90919063ffffffff16565b85549091506116619086906001600160a01b0316856119d1565b6008546116799086906001600160a01b0316846119d1565b6009546116919086906001600160a01b0316836119d1565b600c850154604080518a8152602081018a9052808201869052606081018590526080810184905260a0810192909252517fd65d5200403c91ce7099fe932b5af1a35b7306493cc7cfd67e867f7c344894349181900360c00190a1506001979650505050505050565b6000606060006060806000806000806000806117136131cb565b61171c8d61274f565b905060606117298e612c50565b90508d826020015183600001518460400151848660e001518761010001518861012001518961014001518a61016001518b61018001519c509c509c509c509c509c509c509c509c509c509c50505091939597999b90929496989a50565b6005546000906001600160a01b031633146117d25760405162461bcd60e51b815260040180806020018281038252602f81526020018061345f602f913960400191505060405180910390fd5b6001600160a01b0382166118175760405162461bcd60e51b81526004018080602001828103825260458152602001806136096045913960600191505060405180910390fd5b610fb2826126ec565b60008061182d8484612191565b60008581526002602052604090209091506118498133846119d1565b60008481526004602090815260408083206003019290925581513381529081018790528082018690526060810184905290517fdef422a44f208b3108bd6fee4f92da9332641cdc3e5885e36ffc8b72d5498dc19181900360800190a1506001949350505050565b60006118ba6131cb565b6118c38361274f565b90506118ee83604051806040016040528060078152602001667375636365737360c81b815250611ce6565b8061191d575061191d836040518060400160405280600781526020016630b23537bab93760c91b815250611ce6565b6119585760405162461bcd60e51b81526004018080602001828103825260348152602001806135336034913960400191505060405180910390fd5b61198183604051806040016040528060078152602001667375636365737360c81b815250611ce6565b156119bb5760006018603c8084610120015142038161199c57fe5b04816119a457fe5b04816119ac57fe5b0460b4111592506109e3915050565b60006018603c8084610140015142038161199c57fe5b600c8301546119e09082612c5b565b600c8401556007546040805163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015611a3b57600080fd5b505af1158015611a4f573d6000803e3d6000fd5b505050506040513d6020811015611a6557600080fd5b5050505050565b600060405160200180806e18dbda985b5199595058d8dbdd5b9d608a1b815250600f01905060405160208183030381529060405280519060200120836040516020018082805190602001908083835b60208310611ada5780518252601f199092019160209182019101611abb565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001201415611b3b57600880546001600160a01b0319166001600160a01b038416179055611cdd565b60405160200180807018da185c9a5d1e5199595058d8dbdd5b9d607a1b815250601101905060405160208183030381529060405280519060200120836040516020018082805190602001908083835b60208310611ba95780518252601f199092019160209182019101611b8a565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001201415611c0a57600980546001600160a01b0319166001600160a01b038416179055611cdd565b60405160200180806c1c995b585a5b9058d8dbdd5b9d609a1b815250600d01905060405160208183030381529060405280519060200120836040516020018082805190602001908083835b60208310611c745780518252601f199092019160209182019101611c55565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001201415611cd557600a80546001600160a01b0319166001600160a01b038416179055611cdd565b506000610fb2565b50600192915050565b6000611cf06131cb565b611cf98461274f565b905080604001516040516020018082805190602001908083835b60208310611d325780518252601f199092019160209182019101611d13565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120836040516020018082805190602001908083835b60208310611da05780518252601f199092019160209182019101611d81565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001201491505092915050565b600091825260208281526040808420928452919052902054151590565b6000898152600260205260409020600e015460ff1615611e535760405162461bcd60e51b815260040180806020018281038252602e8152602001806135db602e913960400191505060405180910390fd5b6064611e6983611e638787612c0e565b90612c0e565b1115611ea65760405162461bcd60e51b815260040180806020018281038252603e815260200180613567603e913960400191505060405180910390fd5b604080516101e0810182526001600160a01b038a8116825260208083018b81528385018b9052606084018a90526080840189905260a0840188905260c084018790524260e08501526000610100850181905261012085018190526101408501819052610160850181905261018085018190526101a0850181905260016101c086018190528f825260028452959020845181546001600160a01b031916941693909317835551805193949293611f6293850192919091019061326f565b5060408201518051611f7e91600284019160209091019061326f565b50606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c8201556101a0820151600d8201556101c090910151600e909101805460ff191691151591909117905560005b8151811015612101576003600083838151811061202a57fe5b60209081029190910181015182528101919091526040016000206002015460ff16156120875760405162461bcd60e51b815260040180806020018281038252602d81526020018061348e602d913960400191505060405180910390fd5b60405180606001604052808b81526020016000815260200160011515815250600360008484815181106120b657fe5b602090810291909101810151825281810192909252604090810160002083518155918301516001808401919091559201516002909101805460ff191691151591909117905501612011565b5060005b81518110156121335761212b8a83838151811061211e57fe5b6020026020010151612c85565b600101612105565b50505050505050505050565b6001600160a01b03811660009081526006602052604081205460ff1615612168575060006109e3565b506001600160a01b03166000908152600660205260409020805460ff1916600190811790915590565b600061219b6131cb565b6121a48461274f565b90506121cf84604051806040016040528060078152602001667375636365737360c81b815250611ce6565b806121fe57506121fe846040518060400160405280600781526020016630b23537bab93760c91b815250611ce6565b6122395760405162461bcd60e51b81526004018080602001828103825260248152602001806136766024913960400191505060405180910390fd5b606461224361318a565b61224c856123b4565b805160208083015160008a815260028352604090819020600d0154815180830190925260078252667375636365737360c81b938201939093529394509192612295908a90611ce6565b15612310578181146122d85760405162461bcd60e51b81526004018080602001828103825260368152602001806135a56036913960400191505060405180910390fd5b6122e061324c565b6122e9826129a5565b905061230c81602001516115f660648a6101800151612b8d90919063ffffffff16565b9550505b828914801561232457506123248383611de5565b801561233557506123358289612d40565b801561234d575060408401516001600160a01b031633145b6123885760405162461bcd60e51b81526004018080602001828103825260308152602001806133356030913960400191505060405180910390fd5b60006123a660646115f6888860600151612b8d90919063ffffffff16565b9a9950505050505050505050565b6123bc61318a565b60008281526004602052604090206005015460ff1661240c5760405162461bcd60e51b815260040180806020018281038252602a8152602001806134e2602a913960400191505060405180910390fd5b50600090815260046020818152604092839020835160c0810185528154815260018201549281019290925260028101546001600160a01b0316938201939093526003830154606082015290820154608082015260059091015460ff16151560a082015290565b6001600160a01b031660009081526006602052604090205460ff1690565b6040805160c08101825286815260208082018781526001600160a01b03868116848601908152606085018781524260808701908152600160a0880181815260008d81526004808a528b82209a518b559751928a019290925593516002808a0180546001600160a01b0319169290971691909117909555915160038801555193860193909355516005909401805460ff19169415159490941790935588815291905220600b01546125409082612c0e565b6000868152600260209081526040808320600b019390935586825260039052206001015461256e9082612c0e565b600085815260036020526040902060010155611a658484612d5f565b60006125b58260405180604001604052806007815260200166617070726f766560c81b815250611ce6565b6125f05760405162461bcd60e51b81526004018080602001828103825260328152602001806133036032913960400191505060405180910390fd5b61261a8260405180604001604052806008815260200167199a5b9a5cda195960c21b815250612def565b50506000908152600260205260409020426008820155600b810154600c90910155600190565b600061266c8260405180604001604052806008815260200167199a5b9a5cda195960c21b815250611ce6565b6126a75760405162461bcd60e51b81526004018080602001828103825260338152602001806133c86033913960400191505060405180910390fd5b6126d0826040518060400160405280600781526020016630b23537bab93760c91b815250612def565b5050600090815260026020526040902042600a90910155600190565b6005546040516000916001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908490a350600580546001600160a01b0319166001600160a01b0392909216919091179055600190565b6127576131cb565b6000828152600260205260409020600e015460ff166127a75760405162461bcd60e51b815260040180806020018281038252602781526020018061350c6027913960400191505060405180910390fd5b60008281526002602081815260409283902083516101e08101855281546001600160a01b031681526001808301805487516101009382161593909302600019011695909504601f810185900485028201850190965285815290949193858401939192909183018282801561285c5780601f106128315761010080835404028352916020019161285c565b820191906000526020600020905b81548152906001019060200180831161283f57829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156128ee5780601f106128c3576101008083540402835291602001916128ee565b820191906000526020600020905b8154815290600101906020018083116128d157829003601f168201915b505050918352505060038201546020820152600482015460408201526005820154606082015260068201546080820152600782015460a0820152600882015460c0820152600982015460e0820152600a820154610100820152600b820154610120820152600c820154610140820152600d820154610160820152600e9091015460ff1615156101809091015292915050565b600554600854600954600a546001600160a01b03938416949284169391821692911690565b6129ad61324c565b60008281526003602052604090206002015460ff166129fd5760405162461bcd60e51b81526004018080602001828103825260278152602001806134bb6027913960400191505060405180910390fd5b506000908152600360209081526040918290208251606081018452815481526001820154928101929092526002015460ff1615159181019190915290565b6060610fb282612e6f565b6001600160a01b03811660009081526006602052604081205460ff16612a6e575060006109e3565b506001600160a01b03166000908152600660205260409020805460ff19169055600190565b6000612abf8360405180604001604052806008815260200167199a5b9a5cda195960c21b815250611ce6565b612afa5760405162461bcd60e51b81526004018080602001828103825260338152602001806133656033913960400191505060405180910390fd5b612b048383611de5565b612b3f5760405162461bcd60e51b81526004018080602001828103825260378152602001806134286037913960400191505060405180910390fd5b612b6883604051806040016040528060078152602001667375636365737360c81b815250612def565b5050600091825260026020526040909120600d81019190915542600990910155600190565b600082612b9c57506000610fb2565b82820282848281612ba957fe5b0414610faf576040805162461bcd60e51b815260206004820152600560248201526429a69d1c1960d91b604482015290519081900360640190fd5b6000610faf838360405180604001604052806005815260200164534d3a393960d81b815250612f84565b600082820183811015610faf576040805162461bcd60e51b81526020600482015260056024820152640a69a7464760db1b604482015290519081900360640190fd5b6060610fb282613026565b6000610faf838360405180604001604052806005815260200164534d3a343360d81b815250613130565b80600010612cc0576040805162461bcd60e51b815260206004820152600360248201526265313360e81b604482015290519081900360640190fd5b60008281526020818152604080832084845291829052909120548015612d13576040805162461bcd60e51b815260206004820152600360248201526265313960e81b604482015290519081900360640190fd5b50600180820180549182018155600081815260208082209093018590559054938152919052604090205550565b6000918252600160209081526040808420928452919052902054151590565b80600010612d9a576040805162461bcd60e51b815260206004820152600360248201526265313360e81b604482015290519081900360640190fd5b600082815260016020908152604080832084845291829052909120548015612d13576040805162461bcd60e51b815260206004820152600360248201526265313960e81b604482015290519081900360640190fd5b6000828152600260205260408120600e015460ff16612e3f5760405162461bcd60e51b815260040180806020018281038252602d8152602001806133fb602d913960400191505060405180910390fd5b600083815260026020818152604090922084519092612e64928401919086019061326f565b506001949350505050565b6000818152600160205260408120606091805b6001830154811015612ebf57826001018181548110612e9d57fe5b906000526020600020015460001015612eb7576001909101905b600101612e82565b5060608167ffffffffffffffff81118015612ed957600080fd5b50604051908082528060200260200182016040528015612f03578160200160208202803683370190505b5090506000805b6001850154811015612f7957846001018181548110612f2557fe5b906000526020600020015460001015612f7157846001018181548110612f4757fe5b9060005260206000200154838380600101945081518110612f6457fe5b6020026020010181815250505b600101612f0a565b509095945050505050565b600081836130105760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612fd5578181015183820152602001612fbd565b50505050905090810190601f1680156130025780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161301c57fe5b0495945050505050565b6000818152602081905260408120606091805b60018301548110156130765782600101818154811061305457fe5b90600052602060002001546000101561306e576001909101905b600101613039565b5060608167ffffffffffffffff8111801561309057600080fd5b506040519080825280602002602001820160405280156130ba578160200160208202803683370190505b5090506000805b6001850154811015612f79578460010181815481106130dc57fe5b906000526020600020015460001015613128578460010181815481106130fe57fe5b906000526020600020015483838060010194508151811061311b57fe5b6020026020010181815250505b6001016130c1565b600081848411156131825760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612fd5578181015183820152602001612fbd565b505050900390565b6040518060c00160405280600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000151581525090565b604051806101e0016040528060006001600160a01b03168152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b604051806060016040528060008152602001600081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106132b057805160ff19168380011785556132dd565b828001600101855582156132dd579182015b828111156132dd5782518255916020019190600101906132c2565b506132e99291506132ed565b5090565b5b808211156132e957600081556001016132ee56fe4d61726b65742f46696e6973684d61726b65743a204d61726b6574206973206e6f7420617070726f766564207374617475734d61726b65742f526563656976653a20476976656e20696e666f726d6174696f6e20646f6573206e6f74206d617463684d61726b65742f537563636573734d61726b65743a204d61726b6574206973206e6f742066696e6973686564207374617475734d61726b65742f52657472696576653a2043616e6e6f74205265747269657665206265666f72652031383020646179734d61726b65742f41646a6f75726e4d61726b65743a204d61726b6574206973206e6f742066696e6973686564207374617475734d61726b65742f4368616e67655374617475733a204d61726b65744b657920646f6573206e6f742065786973744d61726b65742f537563636573734d61726b65743a204d61726b657420646f6573206e6f7420636f6e7461696e20616e737765724b65794f776e61626c65203a2046756e6374696f6e2063616c6c656420627920756e617574686f72697a656420757365722e4d61726b65742f417070726f76654d61726b65743a20416e737765724b657920616c72656164792065786973744d61726b65742f416e737765723a20416e737765724b657920646f6573206e6f742065786973744d61726b65742f42657474696e673a2062657474696e67206b657920646f6573206e6f742065786973744d61726b65742f4d61726b65743a204d61726b65744b657920646f6573206e6f742065786973744d61726b65742f52657472696576653a2043616e6e6f74205265747269657665206e6f742066696e6973686564206d61726b65744d61726b65742f417070726f76654d61726b65743a2053756d206f66206665652070657263656e74616765206973206c6172676572207468616e203130304d61726b65742f526563656976653a20416e73776572206b6579206973206e6f742073756363656564656420616e73776572206b65794d61726b65742f417070726f76654d61726b65743a204d61726b6574206b657920616c72656164792065786973744f776e61626c652f7472616e736665724f776e657273686970203a2063616e6e6f74207472616e73666572206f776e65727368697020746f207a65726f20616464726573734d61726b65742f42657474696e673a2042657474696e67206973206e6f7420617661696c61626c654d61726b65742f526563656976653a2043616e6e6f74207265636569766520746f6b656ea26469706673582212205b49b0ec13d92f8bbd55e6f3242eb934a3d366318ff8362a66683d43034a017f64736f6c63430007010033";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_GETMARKET = "getMarket";

    public static final String FUNC_GETMARKETFEE = "getMarketFee";

    public static final String FUNC_GETANSWER = "getAnswer";

    public static final String FUNC_GETBETTING = "getBetting";

    public static final String FUNC_GETACCOUNTS = "getAccounts";

    public static final String FUNC_AVAILABLERECEIVETOKENS = "availableReceiveTokens";

    public static final String FUNC_RECEIVETOKEN = "receiveToken";

    public static final String FUNC_ISRETRIEVABLE = "isRetrievable";

    public static final String FUNC_RETRIEVETOKENS = "retrieveTokens";

    public static final String FUNC_FINISHMARKET = "finishMarket";

    public static final String FUNC_SUCCESSMARKET = "successMarket";

    public static final String FUNC_ADJOURNMARKET = "adjournMarket";

    public static final String FUNC_SETACCOUNT = "setAccount";

    public static final String FUNC_BET = "bet";

    public static final String FUNC_AVAILABLEBET = "availableBet";

    public static final String FUNC_APPROVEMARKET = "approveMarket";

    public static final String FUNC_ISLOCK = "isLock";

    public static final String FUNC_LOCK = "lock";

    public static final String FUNC_UNLOCK = "unlock";

    public static final Event ADJOURNMARKET_EVENT = new Event("AdjournMarket", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVEMARKET_EVENT = new Event("ApproveMarket", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event BET_EVENT = new Event("Bet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FINISHMARKET_EVENT = new Event("FinishMarket", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event LOCKUSER_EVENT = new Event("LockUser", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event RETRIEVEDMARKET_EVENT = new Event("RetrievedMarket", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETACCOUNT_EVENT = new Event("SetAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUCCESSMARKET_EVENT = new Event("SuccessMarket", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TOKENRECEIVED_EVENT = new Event("TokenReceived", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UNLOCKUSER_EVENT = new Event("UnlockUser", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("1001", "0xB5c31C08aeA6Cb1d326Cd5b956950B9c98f5260f");
    }

    protected CojamMarket(String contractAddress, Caver caver, KlayCredentials credentials, int chainId, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, caver, credentials, chainId, contractGasProvider);
    }

    protected CojamMarket(String contractAddress, Caver caver, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, caver, transactionManager, contractGasProvider);
    }

    public List<AdjournMarketEventResponse> getAdjournMarketEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADJOURNMARKET_EVENT, transactionReceipt);
        ArrayList<AdjournMarketEventResponse> responses = new ArrayList<AdjournMarketEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            AdjournMarketEventResponse typedResponse = new AdjournMarketEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.market = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ApproveMarketEventResponse> getApproveMarketEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEMARKET_EVENT, transactionReceipt);
        ArrayList<ApproveMarketEventResponse> responses = new ArrayList<ApproveMarketEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            ApproveMarketEventResponse typedResponse = new ApproveMarketEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.market = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.title = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.creator = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.creatorFee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.creatorFeePercentage = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.cojamFeePercentage = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.charityFeePercentage = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.answerKeys = (List<BigInteger>) eventValues.getNonIndexedValues().get(7).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<BetEventResponse> getBetEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(BET_EVENT, transactionReceipt);
        ArrayList<BetEventResponse> responses = new ArrayList<BetEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            BetEventResponse typedResponse = new BetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.market = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.answer = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.betting = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<FinishMarketEventResponse> getFinishMarketEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(FINISHMARKET_EVENT, transactionReceipt);
        ArrayList<FinishMarketEventResponse> responses = new ArrayList<FinishMarketEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            FinishMarketEventResponse typedResponse = new FinishMarketEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.market = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<LockUserEventResponse> getLockUserEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOCKUSER_EVENT, transactionReceipt);
        ArrayList<LockUserEventResponse> responses = new ArrayList<LockUserEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            LockUserEventResponse typedResponse = new LockUserEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.currentOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RetrievedMarketEventResponse> getRetrievedMarketEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(RETRIEVEDMARKET_EVENT, transactionReceipt);
        ArrayList<RetrievedMarketEventResponse> responses = new ArrayList<RetrievedMarketEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            RetrievedMarketEventResponse typedResponse = new RetrievedMarketEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.market = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<SetAccountEventResponse> getSetAccountEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETACCOUNT_EVENT, transactionReceipt);
        ArrayList<SetAccountEventResponse> responses = new ArrayList<SetAccountEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            SetAccountEventResponse typedResponse = new SetAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.key = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<SuccessMarketEventResponse> getSuccessMarketEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUCCESSMARKET_EVENT, transactionReceipt);
        ArrayList<SuccessMarketEventResponse> responses = new ArrayList<SuccessMarketEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            SuccessMarketEventResponse typedResponse = new SuccessMarketEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.market = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.answer = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.creatorFee = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.cojamFee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.charityFee = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.remains = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<TokenReceivedEventResponse> getTokenReceivedEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(TOKENRECEIVED_EVENT, transactionReceipt);
        ArrayList<TokenReceivedEventResponse> responses = new ArrayList<TokenReceivedEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            TokenReceivedEventResponse typedResponse = new TokenReceivedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.market = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.betting = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.received = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UnlockUserEventResponse> getUnlockUserEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNLOCKUSER_EVENT, transactionReceipt);
        ArrayList<UnlockUserEventResponse> responses = new ArrayList<UnlockUserEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            UnlockUserEventResponse typedResponse = new UnlockUserEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple11<BigInteger, String, String, String, List<BigInteger>, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getMarket(BigInteger marketKey) {
        final Function function = new Function(FUNC_GETMARKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple11<BigInteger, String, String, String, List<BigInteger>, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple11<BigInteger, String, String, String, List<BigInteger>, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple11<BigInteger, String, String, String, List<BigInteger>, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple11<BigInteger, String, String, String, List<BigInteger>, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                convertToNative((List<Uint256>) results.get(4).getValue()), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue(), 
                                (BigInteger) results.get(9).getValue(), 
                                (BigInteger) results.get(10).getValue());
                    }
                });
    }

    public RemoteCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> getMarketFee(BigInteger marketKey) {
        final Function function = new Function(FUNC_GETMARKETFEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<Tuple3<BigInteger, BigInteger, List<BigInteger>>> getAnswer(BigInteger answerKey) {
        final Function function = new Function(FUNC_GETANSWER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(answerKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple3<BigInteger, BigInteger, List<BigInteger>>>(
                new Callable<Tuple3<BigInteger, BigInteger, List<BigInteger>>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, List<BigInteger>>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                convertToNative((List<Uint256>) results.get(2).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple6<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger>> getBetting(BigInteger bettingKey) {
        final Function function = new Function(FUNC_GETBETTING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(bettingKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple6<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger>>(
                new Callable<Tuple6<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<Tuple4<String, String, String, String>> getAccounts() {
        final Function function = new Function(FUNC_GETACCOUNTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple4<String, String, String, String>>(
                new Callable<Tuple4<String, String, String, String>>() {
                    @Override
                    public Tuple4<String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> availableReceiveTokens(BigInteger marketKey, BigInteger bettingKey) {
        final Function function = new Function(FUNC_AVAILABLERECEIVETOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey), 
                new org.web3j.abi.datatypes.generated.Uint256(bettingKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> receiveToken(BigInteger marketKey, BigInteger bettingKey) {
        final Function function = new Function(
                FUNC_RECEIVETOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey), 
                new org.web3j.abi.datatypes.generated.Uint256(bettingKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isRetrievable(BigInteger marketKey) {
        final Function function = new Function(FUNC_ISRETRIEVABLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> retrieveTokens(BigInteger marketKey) {
        final Function function = new Function(
                FUNC_RETRIEVETOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> finishMarket(BigInteger marketKey) {
        final Function function = new Function(
                FUNC_FINISHMARKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> successMarket(BigInteger marketKey, BigInteger answerKey) {
        final Function function = new Function(
                FUNC_SUCCESSMARKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey), 
                new org.web3j.abi.datatypes.generated.Uint256(answerKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> adjournMarket(BigInteger marketKey) {
        final Function function = new Function(
                FUNC_ADJOURNMARKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> setAccount(String key, String account) {
        final Function function = new Function(
                FUNC_SETACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(key), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> bet(BigInteger marketKey, BigInteger answerKey, BigInteger bettingKey, BigInteger tokens) {
        final Function function = new Function(
                FUNC_BET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey), 
                new org.web3j.abi.datatypes.generated.Uint256(answerKey), 
                new org.web3j.abi.datatypes.generated.Uint256(bettingKey), 
                new org.web3j.abi.datatypes.generated.Uint256(tokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> availableBet(BigInteger marketKey, BigInteger answerKey, BigInteger bettingKey, BigInteger tokens) {
        final Function function = new Function(FUNC_AVAILABLEBET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey), 
                new org.web3j.abi.datatypes.generated.Uint256(answerKey), 
                new org.web3j.abi.datatypes.generated.Uint256(bettingKey), 
                new org.web3j.abi.datatypes.generated.Uint256(tokens)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> approveMarket(BigInteger marketKey, String creator, String title, BigInteger creatorFee, BigInteger creatorFeePercentage, BigInteger cojamFeePercentage, BigInteger charityFeePercentage, List<BigInteger> answerKeys) {
        final Function function = new Function(
                FUNC_APPROVEMARKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey), 
                new org.web3j.abi.datatypes.Address(creator), 
                new org.web3j.abi.datatypes.Utf8String(title), 
                new org.web3j.abi.datatypes.generated.Uint256(creatorFee), 
                new org.web3j.abi.datatypes.generated.Uint256(creatorFeePercentage), 
                new org.web3j.abi.datatypes.generated.Uint256(cojamFeePercentage), 
                new org.web3j.abi.datatypes.generated.Uint256(charityFeePercentage), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(answerKeys, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isLock(String target) {
        final Function function = new Function(FUNC_ISLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(target)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> lock(List<String> targets) {
        final Function function = new Function(
                FUNC_LOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> unlock(List<String> targets) {
        final Function function = new Function(
                FUNC_UNLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static CojamMarket load(String contractAddress, Caver caver, KlayCredentials credentials, int chainId, ContractGasProvider contractGasProvider) {
        return new CojamMarket(contractAddress, caver, credentials, chainId, contractGasProvider);
    }

    public static CojamMarket load(String contractAddress, Caver caver, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CojamMarket(contractAddress, caver, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CojamMarket> deploy(Caver caver, KlayCredentials credentials, int chainId, ContractGasProvider contractGasProvider, String token) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(token)));
        return deployRemoteCall(CojamMarket.class, caver, credentials, chainId, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CojamMarket> deploy(Caver caver, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String token) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(token)));
        return deployRemoteCall(CojamMarket.class, caver, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class AdjournMarketEventResponse {
        public KlayLogs.Log log;

        public BigInteger market;
    }

    public static class ApproveMarketEventResponse {
        public KlayLogs.Log log;

        public BigInteger market;

        public String title;

        public String creator;

        public BigInteger creatorFee;

        public BigInteger creatorFeePercentage;

        public BigInteger cojamFeePercentage;

        public BigInteger charityFeePercentage;

        public List<BigInteger> answerKeys;
    }

    public static class BetEventResponse {
        public KlayLogs.Log log;

        public BigInteger market;

        public BigInteger answer;

        public BigInteger betting;

        public BigInteger tokens;
    }

    public static class FinishMarketEventResponse {
        public KlayLogs.Log log;

        public BigInteger market;
    }

    public static class LockUserEventResponse {
        public KlayLogs.Log log;

        public String user;
    }

    public static class OwnershipTransferredEventResponse {
        public KlayLogs.Log log;

        public String currentOwner;

        public String newOwner;
    }

    public static class RetrievedMarketEventResponse {
        public KlayLogs.Log log;

        public BigInteger market;

        public BigInteger amount;
    }

    public static class SetAccountEventResponse {
        public KlayLogs.Log log;

        public String key;

        public String account;
    }

    public static class SuccessMarketEventResponse {
        public KlayLogs.Log log;

        public BigInteger market;

        public BigInteger answer;

        public BigInteger creatorFee;

        public BigInteger cojamFee;

        public BigInteger charityFee;

        public BigInteger remains;
    }

    public static class TokenReceivedEventResponse {
        public KlayLogs.Log log;

        public String receiver;

        public BigInteger market;

        public BigInteger betting;

        public BigInteger received;
    }

    public static class UnlockUserEventResponse {
        public KlayLogs.Log log;

        public String user;
    }
}
