package io.cojam.web.contract.caver;

import com.klaytn.caver.Caver;
import com.klaytn.caver.crypto.KlayCredentials;
import com.klaytn.caver.methods.response.KlayLogs;
import com.klaytn.caver.methods.response.KlayTransactionReceipt;
import com.klaytn.caver.tx.SmartContract;
import com.klaytn.caver.tx.manager.TransactionManager;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.tuples.generated.Tuple11;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated smart contract code.
 * <p><strong>Do not modify!</strong>
 */
public class CojamMarket extends SmartContract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b506040516138f93803806138f98339818101604052602081101561003357600080fd5b5051600580546001600160a01b031916339081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600780546001600160a01b0319166001600160a01b0392909216919091179055613855806100a46000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80637ef1c3c7116100c3578063cabe2ae11161007c578063cabe2ae114610692578063d791de63146106af578063dd8441ab14610750578063eb44fdd314610773578063f2fde38b146108f0578063fed6b6571461091657610158565b80637ef1c3c7146104de5780638a48ac03146105215780638da5cb5b1461055d578063b5ab58dc14610581578063bfc1676714610600578063c68feb881461067557610158565b8063486ce80c11610115578063486ce80c146103ef5780635016128e14610447578063567bb0b61461046d578063588359b01461049c5780635f25f51a146104b9578063715018a6146104d657610158565b806309f29d1b1461015d57806316220f9b1461018e5780632976789c1461020557806340c0b8231461023457806342f6208e146102c957806346ab0a9d146103ba575b600080fd5b61017a6004803603602081101561017357600080fd5b5035610939565b604080519115158252519081900360200190f35b61017a600480360360408110156101a457600080fd5b810190602081018135600160201b8111156101be57600080fd5b8201836020820111156101d057600080fd5b803590602001918460018302840111600160201b831117156101f157600080fd5b9193509150356001600160a01b0316610a3b565b61017a6004803603608081101561021b57600080fd5b5080359060208101359060408101359060600135610b41565b61017a600480360360e081101561024a57600080fd5b8135916001600160a01b0360208201351691810190606081016040820135600160201b81111561027957600080fd5b82018360208201111561028b57600080fd5b803590602001918460018302840111600160201b831117156102ac57600080fd5b919350915080359060208101359060408101359060600135610c8d565b61036a600480360360208110156102df57600080fd5b810190602081018135600160201b8111156102f957600080fd5b82018360208201111561030b57600080fd5b803590602001918460208302840111600160201b8311171561032c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610de3945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103a657818101518382015260200161038e565b505050509050019250505060405180910390f35b6103dd600480360360408110156103d057600080fd5b5080359060200135610f8d565b60408051918252519081900360200190f35b61040c6004803603602081101561040557600080fd5b5035610fa2565b604080519687526020870195909552858501939093526001600160a01b039091166060850152608084015260a0830152519081900360c00190f35b61017a6004803603602081101561045d57600080fd5b50356001600160a01b0316610fe6565b61017a6004803603608081101561048357600080fd5b5080359060208101359060408101359060600135610ff1565b61017a600480360360208110156104b257600080fd5b5035611190565b61017a600480360360208110156104cf57600080fd5b5035611221565b61017a6112b2565b6104fb600480360360208110156104f457600080fd5b503561130d565b604080519485526020850193909352838301919091526060830152519081900360800190f35b610529611349565b604080516001600160a01b039586168152938516602085015291841683830152909216606082015290519081900360800190f35b610565611365565b604080516001600160a01b039092168252519081900360200190f35b61059e6004803603602081101561059757600080fd5b5035611374565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156105ea5781810151838201526020016105d2565b5050505090500194505050505060405180910390f35b61017a6004803603604081101561061657600080fd5b81359190810190604081016020820135600160201b81111561063757600080fd5b82018360208201111561064957600080fd5b803590602001918460208302840111600160201b8311171561066a57600080fd5b5090925090506113a7565b61017a6004803603602081101561068b57600080fd5b50356114a5565b61017a600480360360208110156106a857600080fd5b50356114b0565b61036a600480360360208110156106c557600080fd5b810190602081018135600160201b8111156106df57600080fd5b8201836020820111156106f157600080fd5b803590602001918460208302840111600160201b8311171561071257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611560945050505050565b61017a6004803603604081101561076657600080fd5b5080359060200135611705565b6107906004803603602081101561078957600080fd5b5035611891565b604051808c8152602001806020018b6001600160a01b0316815260200180602001806020018a815260200189815260200188815260200187815260200186815260200185815260200184810384528e818151815260200191508051906020019080838360005b8381101561080e5781810151838201526020016107f6565b50505050905090810190601f16801561083b5780820380516001836020036101000a031916815260200191505b5084810383528c5181528c516020918201918e019080838360005b8381101561086e578181015183820152602001610856565b50505050905090810190601f16801561089b5780820380516001836020036101000a031916815260200191505b5084810382528b5181528b51602091820191808e01910280838360005b838110156108d05781810151838201526020016108b8565b505050509050019e50505050505050505050505050505060405180910390f35b61017a6004803603602081101561090657600080fd5b50356001600160a01b031661191e565b61017a6004803603604081101561092c57600080fd5b50803590602001356119b8565b6005546000906001600160a01b031633146109855760405162461bcd60e51b815260040180806020018281038252602f815260200180613623602f913960400191505060405180910390fd5b61098e82611a48565b6109c95760405162461bcd60e51b815260040180806020018281038252603081526020018061355c6030913960400191505060405180910390fd5b6000828152600260205260409020600c810154600a546109f49083906001600160a01b031683611b69565b604080518581526020810183905281517fbf004399565ddf6633fe779f298281a0357558f9b0f968e99b32c9b0bd89d369929181900390910190a16001925050505b919050565b6005546000906001600160a01b03163314610a875760405162461bcd60e51b815260040180806020018281038252602f815260200180613623602f913960400191505060405180910390fd5b7f1f7c86bf84a9b55687467c9cdbec7f225b9e7949eabe6538a58e67453c90b5808484846040518080602001836001600160a01b031681526020018281038252858582818152602001925080828437600083820152604051601f909101601f1916909201829003965090945050505050a1610b3984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250611c04915050565b949350505050565b600084848484610b708460405180604001604052806007815260200166617070726f766560c81b815250611e7e565b8015610b815750610b818484611f7d565b8015610b9e575060008381526003602052604090206002015460ff165b8015610bbc575060008281526004602052604090206005015460ff16155b610bf75760405162461bcd60e51b81526004018080602001828103825260288152602001806137d46028913960400191505060405180910390fd5b600754604080516370a0823160e01b8152336004820152905188926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610c4157600080fd5b505afa158015610c55573d6000803e3d6000fd5b505050506040513d6020811015610c6b57600080fd5b50511015610c7c5760009450610c81565b600194505b50505050949350505050565b6005546000906001600160a01b03163314610cd95760405162461bcd60e51b815260040180806020018281038252602f815260200180613623602f913960400191505060405180910390fd5b610d3b898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080518082019091526005815264191c98599d60da1b602082015291508a9050898989611f9a565b7f194dd52ae67adf300f172b7fb5e3e408123c5239f46b1d966b47cb8bedd335a18988888b898989896040518089815260200180602001876001600160a01b031681526020018681526020018581526020018481526020018381526020018281038252898982818152602001925080828437600083820152604051601f909101601f19169092018290039b50909950505050505050505050a150600198975050505050505050565b6005546060906001600160a01b03163314610e2f5760405162461bcd60e51b815260040180806020018281038252602f815260200180613623602f913960400191505060405180910390fd5b6060825167ffffffffffffffff81118015610e4957600080fd5b50604051908082528060200260200182016040528015610e73578160200160208202803683370190505b50905060005b8351811015610f8657838181518110610e8e57fe5b60209081029190910101516005546001600160a01b0390811691161415610ef1576040805162461bcd60e51b815260206004820152601260248201527131b0b7103737ba103637b1b59037bbb732b960711b604482015290519081900360640190fd5b610f0d848281518110610f0057fe5b602002602001015161210c565b828281518110610f1957fe5b6020026020010190151590811515815250507f169aadf55dc2098830ccf9f334e3ce3933b6e895b9114fc9f49242f2be61fe8e848281518110610f5857fe5b602002602001015160405180826001600160a01b0316815260200191505060405180910390a1600101610e79565b5092915050565b6000610f99838361215e565b90505b92915050565b600080600080600080610fb361334e565b610fbc88612381565b8051602082015160408301516060840151608090940151929c919b9a509850919650945092505050565b6000610f9c8261243f565b6000848484846110208460405180604001604052806007815260200166617070726f766560c81b815250611e7e565b801561103157506110318484611f7d565b801561104e575060008381526003602052604090206002015460ff165b801561106c575060008281526004602052604090206005015460ff16155b6110a75760405162461bcd60e51b81526004018080602001828103825260288152602001806137d46028913960400191505060405180910390fd5b6110b4898989338a61245d565b600754604080516323b872dd60e01b81523360048201523060248201526044810189905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b15801561110e57600080fd5b505af1158015611122573d6000803e3d6000fd5b505050506040513d602081101561113857600080fd5b5050604080518a8152602081018a90528082018990526060810188905290517f9081ce9d818a5e04f71a33279791ee023291ecd76fe89b7cf1eafcaae0e8290d9181900360800190a150600198975050505050505050565b6005546000906001600160a01b031633146111dc5760405162461bcd60e51b815260040180806020018281038252602f815260200180613623602f913960400191505060405180910390fd5b6111e582612557565b506040805183815290517f84559d4021c16877e4575b5ef6db96bb82e953e6d7ef199822aa24bc981410739181900360200190a1506001919050565b6005546000906001600160a01b0316331461126d5760405162461bcd60e51b815260040180806020018281038252602f815260200180613623602f913960400191505060405180910390fd5b6112768261260d565b506040805183815290517f08ad4b8c34ee57b9e19a0aa2349b5962188beca5180d3ae0d9539b915eeb90889181900360200190a1506001919050565b6005546000906001600160a01b031633146112fe5760405162461bcd60e51b815260040180806020018281038252602f815260200180613623602f913960400191505060405180910390fd5b61130860006126b9565b905090565b60008060008061131b61338f565b6113248661271c565b6060810151608082015160a083015160c0909301519199909850919650945092505050565b60008060008061135761294d565b935093509350935090919293565b6005546001600160a01b031690565b6000806060611381613410565b61138a85612972565b80519091508561139981612a08565b935093509350509193909250565b6005546000906001600160a01b031633146113f35760405162461bcd60e51b815260040180806020018281038252602f815260200180613623602f913960400191505060405180910390fd5b61143084848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612a1392505050565b7ffa4e24e993fbdd34f315ecda6e5ef8eaa9df443497a36cc4e54c0dc2368062cf84848460405180848152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a15060019392505050565b6000610f9c82611a48565b6005546000906001600160a01b031633146114fc5760405162461bcd60e51b815260040180806020018281038252602f815260200180613623602f913960400191505060405180910390fd5b6115258260405180604001604052806007815260200166617070726f766560c81b815250612b8e565b6040805183815290517f5ab1e1af80e02debb1ebdac73281011e832523d43ccb02db5ca0e19177f4e3d89181900360200190a1506001919050565b6005546060906001600160a01b031633146115ac5760405162461bcd60e51b815260040180806020018281038252602f815260200180613623602f913960400191505060405180910390fd5b6060825167ffffffffffffffff811180156115c657600080fd5b506040519080825280602002602001820160405280156115f0578160200160208202803683370190505b50905060005b8351811015610f865783818151811061160b57fe5b60209081029190910101516005546001600160a01b0390811691161415611670576040805162461bcd60e51b815260206004820152601460248201527331b0b7103737ba103ab73637b1b59037bbb732b960611b604482015290519081900360640190fd5b61168c84828151811061167f57fe5b6020026020010151612c0a565b82828151811061169857fe5b6020026020010190151590811515815250507f687691c08a3e67a160ba20a32cb1c56791955f12c5ff5d5fcf62bc456ad79ea18482815181106116d757fe5b602002602001015160405180826001600160a01b0316815260200191505060405180910390a16001016115f6565b6005546000906001600160a01b031633146117515760405162461bcd60e51b815260040180806020018281038252602f815260200180613623602f913960400191505060405180910390fd5b61175b8383612c57565b506000838152600260205260408120600c81015460048201549192909161179f906117949060649061178e908690612d51565b90612da8565b600385015490612dd2565b905060006117bf606461178e866005015486612d5190919063ffffffff16565b905060006117df606461178e876006015487612d5190919063ffffffff16565b85549091506117f99086906001600160a01b031685611b69565b6008546118119086906001600160a01b031684611b69565b6009546118299086906001600160a01b031683611b69565b600c850154604080518a8152602081018a9052808201869052606081018590526080810184905260a0810192909252517fd65d5200403c91ce7099fe932b5af1a35b7306493cc7cfd67e867f7c344894349181900360c00190a1506001979650505050505050565b6000606060006060806000806000806000806118ab61338f565b6118b48d61271c565b905060606118c18e612e14565b90508d826020015183600001518460400151848660e001518761010001518861012001518961014001518a61016001518b61018001519c509c509c509c509c509c509c509c509c509c509c50505091939597999b90929496989a50565b6005546000906001600160a01b0316331461196a5760405162461bcd60e51b815260040180806020018281038252602f815260200180613623602f913960400191505060405180910390fd5b6001600160a01b0382166119af5760405162461bcd60e51b815260040180806020018281038252604581526020018061378f6045913960600191505060405180910390fd5b610f9c826126b9565b6000806119c5848461215e565b60008581526002602052604090209091506119e1813384611b69565b60008481526004602090815260408083206003019290925581513381529081018790528082018690526060810184905290517fdef422a44f208b3108bd6fee4f92da9332641cdc3e5885e36ffc8b72d5498dc19181900360800190a1506001949350505050565b6000611a5261338f565b611a5b8361271c565b9050611a8683604051806040016040528060078152602001667375636365737360c81b815250611e7e565b80611ab55750611ab5836040518060400160405280600781526020016630b23537bab93760c91b815250611e7e565b611af05760405162461bcd60e51b81526004018080602001828103825260348152602001806136f76034913960400191505060405180910390fd5b611b1983604051806040016040528060078152602001667375636365737360c81b815250611e7e565b15611b535760006018603c80846101200151420381611b3457fe5b0481611b3c57fe5b0481611b4457fe5b0460b411159250610a36915050565b60006018603c80846101400151420381611b3457fe5b600c830154611b789082612e1f565b600c8401556007546040805163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015611bd357600080fd5b505af1158015611be7573d6000803e3d6000fd5b505050506040513d6020811015611bfd57600080fd5b5050505050565b600060405160200180806e18dbda985b5199595058d8dbdd5b9d608a1b815250600f01905060405160208183030381529060405280519060200120836040516020018082805190602001908083835b60208310611c725780518252601f199092019160209182019101611c53565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001201415611cd357600880546001600160a01b0319166001600160a01b038416179055611e75565b60405160200180807018da185c9a5d1e5199595058d8dbdd5b9d607a1b815250601101905060405160208183030381529060405280519060200120836040516020018082805190602001908083835b60208310611d415780518252601f199092019160209182019101611d22565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001201415611da257600980546001600160a01b0319166001600160a01b038416179055611e75565b60405160200180806c1c995b585a5b9058d8dbdd5b9d609a1b815250600d01905060405160208183030381529060405280519060200120836040516020018082805190602001908083835b60208310611e0c5780518252601f199092019160209182019101611ded565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001201415611e6d57600a80546001600160a01b0319166001600160a01b038416179055611e75565b506000610f9c565b50600192915050565b6000611e8861338f565b611e918461271c565b905080604001516040516020018082805190602001908083835b60208310611eca5780518252601f199092019160209182019101611eab565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120836040516020018082805190602001908083835b60208310611f385780518252601f199092019160209182019101611f19565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001201491505092915050565b600091825260208281526040808420928452919052902054151590565b604080516101e0810182526001600160a01b03898116825260208083018a81528385018a9052606084018990526080840188905260a0840187905260c084018690524260e08501526000610100850181905261012085018190526101408501819052610160850181905261018085018190526101a0850181905260016101c086018190528e825260028452959020845181546001600160a01b031916941693909317835551805193949293612056938501929190910190613433565b5060408201518051612072916002840191602090910190613433565b50606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c8201556101a0820151600d8201556101c090910151600e909101805460ff19169115159190911790555050505050505050565b6001600160a01b03811660009081526006602052604081205460ff161561213557506000610a36565b506001600160a01b03166000908152600660205260409020805460ff1916600190811790915590565b600061216861338f565b6121718461271c565b905061219c84604051806040016040528060078152602001667375636365737360c81b815250611e7e565b806121cb57506121cb846040518060400160405280600781526020016630b23537bab93760c91b815250611e7e565b6122065760405162461bcd60e51b81526004018080602001828103825260248152602001806137fc6024913960400191505060405180910390fd5b606461221061334e565b61221985612381565b805160208083015160008a815260028352604090819020600d0154815180830190925260078252667375636365737360c81b938201939093529394509192612262908a90611e7e565b156122dd578181146122a55760405162461bcd60e51b815260040180806020018281038252603681526020018061372b6036913960400191505060405180910390fd5b6122ad613410565b6122b682612972565b90506122d9816020015161178e60648a6101800151612d5190919063ffffffff16565b9550505b82891480156122f157506122f18383611f7d565b801561230257506123028289612e49565b801561231a575060408401516001600160a01b031633145b6123555760405162461bcd60e51b81526004018080602001828103825260308152602001806134f96030913960400191505060405180910390fd5b6000612373606461178e888860600151612d5190919063ffffffff16565b9a9950505050505050505050565b61238961334e565b60008281526004602052604090206005015460ff166123d95760405162461bcd60e51b815260040180806020018281038252602a8152602001806136a6602a913960400191505060405180910390fd5b50600090815260046020818152604092839020835160c0810185528154815260018201549281019290925260028101546001600160a01b0316938201939093526003830154606082015290820154608082015260059091015460ff16151560a082015290565b6001600160a01b031660009081526006602052604090205460ff1690565b6040805160c08101825286815260208082018781526001600160a01b03868116848601908152606085018781524260808701908152600160a0880181815260008d81526004808a528b82209a518b559751928a019290925593516002808a0180546001600160a01b0319169290971691909117909555915160038801555193860193909355516005909401805460ff19169415159490941790935588815291905220600b015461250d9082612dd2565b6000868152600260209081526040808320600b019390935586825260039052206001015461253b9082612dd2565b600085815260036020526040902060010155611bfd8484612e68565b60006125828260405180604001604052806007815260200166617070726f766560c81b815250611e7e565b6125bd5760405162461bcd60e51b81526004018080602001828103825260328152602001806134c76032913960400191505060405180910390fd5b6125e78260405180604001604052806008815260200167199a5b9a5cda195960c21b815250612f25565b50506000908152600260205260409020426008820155600b810154600c90910155600190565b60006126398260405180604001604052806008815260200167199a5b9a5cda195960c21b815250611e7e565b6126745760405162461bcd60e51b815260040180806020018281038252603381526020018061358c6033913960400191505060405180910390fd5b61269d826040518060400160405280600781526020016630b23537bab93760c91b815250612f25565b5050600090815260026020526040902042600a90910155600190565b6005546040516000916001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908490a350600580546001600160a01b0319166001600160a01b0392909216919091179055600190565b61272461338f565b6000828152600260205260409020600e015460ff166127745760405162461bcd60e51b81526004018080602001828103825260278152602001806136d06027913960400191505060405180910390fd5b60008281526002602081815260409283902083516101e08101855281546001600160a01b031681526001808301805487516101009382161593909302600019011695909504601f81018590048502820185019096528581529094919385840193919290918301828280156128295780601f106127fe57610100808354040283529160200191612829565b820191906000526020600020905b81548152906001019060200180831161280c57829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156128bb5780601f10612890576101008083540402835291602001916128bb565b820191906000526020600020905b81548152906001019060200180831161289e57829003601f168201915b505050918352505060038201546020820152600482015460408201526005820154606082015260068201546080820152600782015460a0820152600882015460c0820152600982015460e0820152600a820154610100820152600b820154610120820152600c820154610140820152600d820154610160820152600e9091015460ff1615156101809091015292915050565b600554600854600954600a546001600160a01b03938416949284169391821692911690565b61297a613410565b60008281526003602052604090206002015460ff166129ca5760405162461bcd60e51b815260040180806020018281038252602781526020018061367f6027913960400191505060405180910390fd5b506000908152600360209081526040918290208251606081018452815481526001820154928101929092526002015460ff1615159181019190915290565b6060610f9c82612fa5565b6000828152600260205260409020600e015460ff1615612a645760405162461bcd60e51b815260040180806020018281038252602e815260200180613761602e913960400191505060405180910390fd5b60005b8151811015612b575760036000838381518110612a8057fe5b60209081029190910181015182528101919091526040016000206002015460ff1615612add5760405162461bcd60e51b815260040180806020018281038252602d815260200180613652602d913960400191505060405180910390fd5b6040518060600160405280848152602001600081526020016001151581525060036000848481518110612b0c57fe5b602090810291909101810151825281810192909252604090810160002083518155918301516001808401919091559201516002909101805460ff191691151591909117905501612a67565b5060005b8151811015612b8957612b8183838381518110612b7457fe5b60200260200101516130ba565b600101612b5b565b505050565b6000828152600260205260409020600e015460ff1615612bdf5760405162461bcd60e51b815260040180806020018281038252602e815260200180613761602e913960400191505060405180910390fd5b600082815260026020818152604090922083519092612c049284019190850190613433565b50505050565b6001600160a01b03811660009081526006602052604081205460ff16612c3257506000610a36565b506001600160a01b03166000908152600660205260409020805460ff19169055600190565b6000612c838360405180604001604052806008815260200167199a5b9a5cda195960c21b815250611e7e565b612cbe5760405162461bcd60e51b81526004018080602001828103825260338152602001806135296033913960400191505060405180910390fd5b612cc88383611f7d565b612d035760405162461bcd60e51b81526004018080602001828103825260378152602001806135ec6037913960400191505060405180910390fd5b612d2c83604051806040016040528060078152602001667375636365737360c81b815250612f25565b5050600091825260026020526040909120600d81019190915542600990910155600190565b600082612d6057506000610f9c565b82820282848281612d6d57fe5b0414610f99576040805162461bcd60e51b815260206004820152600560248201526429a69d1c1960d91b604482015290519081900360640190fd5b6000610f99838360405180604001604052806005815260200164534d3a393960d81b815250613148565b600082820183811015610f99576040805162461bcd60e51b81526020600482015260056024820152640a69a7464760db1b604482015290519081900360640190fd5b6060610f9c826131ea565b6000610f99838360405180604001604052806005815260200164534d3a343360d81b8152506132f4565b6000918252600160209081526040808420928452919052902054151590565b80600010612ea3576040805162461bcd60e51b815260206004820152600360248201526265313360e81b604482015290519081900360640190fd5b600082815260016020908152604080832084845291829052909120548015612ef8576040805162461bcd60e51b815260206004820152600360248201526265313960e81b604482015290519081900360640190fd5b50600180820180549182018155600081815260208082209093018590559054938152919052604090205550565b6000828152600260205260408120600e015460ff16612f755760405162461bcd60e51b815260040180806020018281038252602d8152602001806135bf602d913960400191505060405180910390fd5b600083815260026020818152604090922084519092612f9a9284019190860190613433565b506001949350505050565b6000818152600160205260408120606091805b6001830154811015612ff557826001018181548110612fd357fe5b906000526020600020015460001015612fed576001909101905b600101612fb8565b5060608167ffffffffffffffff8111801561300f57600080fd5b50604051908082528060200260200182016040528015613039578160200160208202803683370190505b5090506000805b60018501548110156130af5784600101818154811061305b57fe5b9060005260206000200154600010156130a75784600101818154811061307d57fe5b906000526020600020015483838060010194508151811061309a57fe5b6020026020010181815250505b600101613040565b509095945050505050565b806000106130f5576040805162461bcd60e51b815260206004820152600360248201526265313360e81b604482015290519081900360640190fd5b60008281526020818152604080832084845291829052909120548015612ef8576040805162461bcd60e51b815260206004820152600360248201526265313960e81b604482015290519081900360640190fd5b600081836131d45760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613199578181015183820152602001613181565b50505050905090810190601f1680156131c65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816131e057fe5b0495945050505050565b6000818152602081905260408120606091805b600183015481101561323a5782600101818154811061321857fe5b906000526020600020015460001015613232576001909101905b6001016131fd565b5060608167ffffffffffffffff8111801561325457600080fd5b5060405190808252806020026020018201604052801561327e578160200160208202803683370190505b5090506000805b60018501548110156130af578460010181815481106132a057fe5b9060005260206000200154600010156132ec578460010181815481106132c257fe5b90600052602060002001548383806001019450815181106132df57fe5b6020026020010181815250505b600101613285565b600081848411156133465760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315613199578181015183820152602001613181565b505050900390565b6040518060c00160405280600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000151581525090565b604051806101e0016040528060006001600160a01b03168152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b604051806060016040528060008152602001600081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061347457805160ff19168380011785556134a1565b828001600101855582156134a1579182015b828111156134a1578251825591602001919060010190613486565b506134ad9291506134b1565b5090565b5b808211156134ad57600081556001016134b256fe4d61726b65742f46696e6973684d61726b65743a204d61726b6574206973206e6f7420617070726f766564207374617475734d61726b65742f526563656976653a20476976656e20696e666f726d6174696f6e20646f6573206e6f74206d617463684d61726b65742f537563636573734d61726b65743a204d61726b6574206973206e6f742066696e6973686564207374617475734d61726b65742f52657472696576653a2043616e6e6f74205265747269657665206265666f72652031383020646179734d61726b65742f41646a6f75726e4d61726b65743a204d61726b6574206973206e6f742066696e6973686564207374617475734d61726b65742f4368616e67655374617475733a204d61726b65744b657920646f6573206e6f742065786973744d61726b65742f537563636573734d61726b65743a204d61726b657420646f6573206e6f7420636f6e7461696e20616e737765724b65794f776e61626c65203a2046756e6374696f6e2063616c6c656420627920756e617574686f72697a656420757365722e4d61726b65742f417070726f76654d61726b65743a20416e737765724b657920616c72656164792065786973744d61726b65742f416e737765723a20416e737765724b657920646f6573206e6f742065786973744d61726b65742f42657474696e673a2062657474696e67206b657920646f6573206e6f742065786973744d61726b65742f4d61726b65743a204d61726b65744b657920646f6573206e6f742065786973744d61726b65742f52657472696576653a2043616e6e6f74205265747269657665206e6f742066696e6973686564206d61726b65744d61726b65742f526563656976653a20416e73776572206b6579206973206e6f742073756363656564656420616e73776572206b65794d61726b65742f417070726f76654d61726b65743a204d61726b6574206b657920616c72656164792065786973744f776e61626c652f7472616e736665724f776e657273686970203a2063616e6e6f74207472616e73666572206f776e65727368697020746f207a65726f20616464726573734d61726b65742f42657474696e673a2042657474696e67206973206e6f7420617661696c61626c654d61726b65742f526563656976653a2043616e6e6f74207265636569766520746f6b656ea2646970667358221220297c2bcaf567e830de589ab3df74dbc1aef2e4a0944725f59bd9219727d66a1364736f6c63430007010033";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_GETMARKET = "getMarket";

    public static final String FUNC_GETMARKETFEE = "getMarketFee";

    public static final String FUNC_GETANSWER = "getAnswer";

    public static final String FUNC_GETBETTING = "getBetting";

    public static final String FUNC_GETACCOUNTS = "getAccounts";

    public static final String FUNC_AVAILABLERECEIVETOKENS = "availableReceiveTokens";

    public static final String FUNC_RECEIVETOKEN = "receiveToken";

    public static final String FUNC_ISRETRIEVABLE = "isRetrievable";

    public static final String FUNC_RETRIEVETOKENS = "retrieveTokens";

    public static final String FUNC_FINISHMARKET = "finishMarket";

    public static final String FUNC_SUCCESSMARKET = "successMarket";

    public static final String FUNC_ADJOURNMARKET = "adjournMarket";

    public static final String FUNC_SETACCOUNT = "setAccount";

    public static final String FUNC_BET = "bet";

    public static final String FUNC_AVAILABLEBET = "availableBet";

    public static final String FUNC_DRAFTMARKET = "draftMarket";

    public static final String FUNC_APPROVEMARKET = "approveMarket";

    public static final String FUNC_ADDANSWERKEYS = "addAnswerKeys";

    public static final String FUNC_ISLOCK = "isLock";

    public static final String FUNC_LOCK = "lock";

    public static final String FUNC_UNLOCK = "unlock";

    public static final Event ADDANSWERKEYS_EVENT = new Event("AddAnswerKeys", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event ADJOURNMARKET_EVENT = new Event("AdjournMarket", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVEMARKET_EVENT = new Event("ApproveMarket", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event BET_EVENT = new Event("Bet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DRAFTMARKET_EVENT = new Event("DraftMarket", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FINISHMARKET_EVENT = new Event("FinishMarket", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event LOCKUSER_EVENT = new Event("LockUser", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event RETRIEVEDMARKET_EVENT = new Event("RetrievedMarket", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETACCOUNT_EVENT = new Event("SetAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUCCESSMARKET_EVENT = new Event("SuccessMarket", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TOKENRECEIVED_EVENT = new Event("TokenReceived", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UNLOCKUSER_EVENT = new Event("UnlockUser", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("1001", "0x3B319E5Ce59603fdFa3039b5991054E6d8191B4C");
    }

    protected CojamMarket(String contractAddress, Caver caver, KlayCredentials credentials, int chainId, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, caver, credentials, chainId, contractGasProvider);
    }

    protected CojamMarket(String contractAddress, Caver caver, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, caver, transactionManager, contractGasProvider);
    }

    public List<AddAnswerKeysEventResponse> getAddAnswerKeysEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDANSWERKEYS_EVENT, transactionReceipt);
        ArrayList<AddAnswerKeysEventResponse> responses = new ArrayList<AddAnswerKeysEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            AddAnswerKeysEventResponse typedResponse = new AddAnswerKeysEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.market = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.answerKeys = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<AdjournMarketEventResponse> getAdjournMarketEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADJOURNMARKET_EVENT, transactionReceipt);
        ArrayList<AdjournMarketEventResponse> responses = new ArrayList<AdjournMarketEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            AdjournMarketEventResponse typedResponse = new AdjournMarketEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.market = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ApproveMarketEventResponse> getApproveMarketEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEMARKET_EVENT, transactionReceipt);
        ArrayList<ApproveMarketEventResponse> responses = new ArrayList<ApproveMarketEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            ApproveMarketEventResponse typedResponse = new ApproveMarketEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.market = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<BetEventResponse> getBetEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(BET_EVENT, transactionReceipt);
        ArrayList<BetEventResponse> responses = new ArrayList<BetEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            BetEventResponse typedResponse = new BetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.market = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.answer = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.betting = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<DraftMarketEventResponse> getDraftMarketEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(DRAFTMARKET_EVENT, transactionReceipt);
        ArrayList<DraftMarketEventResponse> responses = new ArrayList<DraftMarketEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            DraftMarketEventResponse typedResponse = new DraftMarketEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.market = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.title = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.creator = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.creatorFee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.creatorFeePercentage = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.cojamFeePercentage = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.charityFeePercentage = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<FinishMarketEventResponse> getFinishMarketEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(FINISHMARKET_EVENT, transactionReceipt);
        ArrayList<FinishMarketEventResponse> responses = new ArrayList<FinishMarketEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            FinishMarketEventResponse typedResponse = new FinishMarketEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.market = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<LockUserEventResponse> getLockUserEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOCKUSER_EVENT, transactionReceipt);
        ArrayList<LockUserEventResponse> responses = new ArrayList<LockUserEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            LockUserEventResponse typedResponse = new LockUserEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.currentOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RetrievedMarketEventResponse> getRetrievedMarketEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(RETRIEVEDMARKET_EVENT, transactionReceipt);
        ArrayList<RetrievedMarketEventResponse> responses = new ArrayList<RetrievedMarketEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            RetrievedMarketEventResponse typedResponse = new RetrievedMarketEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.market = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<SetAccountEventResponse> getSetAccountEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETACCOUNT_EVENT, transactionReceipt);
        ArrayList<SetAccountEventResponse> responses = new ArrayList<SetAccountEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            SetAccountEventResponse typedResponse = new SetAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.key = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<SuccessMarketEventResponse> getSuccessMarketEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUCCESSMARKET_EVENT, transactionReceipt);
        ArrayList<SuccessMarketEventResponse> responses = new ArrayList<SuccessMarketEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            SuccessMarketEventResponse typedResponse = new SuccessMarketEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.market = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.answer = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.creatorFee = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.cojamFee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.charityFee = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.remains = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<TokenReceivedEventResponse> getTokenReceivedEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(TOKENRECEIVED_EVENT, transactionReceipt);
        ArrayList<TokenReceivedEventResponse> responses = new ArrayList<TokenReceivedEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            TokenReceivedEventResponse typedResponse = new TokenReceivedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.market = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.betting = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.received = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UnlockUserEventResponse> getUnlockUserEvents(KlayTransactionReceipt.TransactionReceipt transactionReceipt) {
        List<SmartContract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNLOCKUSER_EVENT, transactionReceipt);
        ArrayList<UnlockUserEventResponse> responses = new ArrayList<UnlockUserEventResponse>(valueList.size());
        for (SmartContract.EventValuesWithLog eventValues : valueList) {
            UnlockUserEventResponse typedResponse = new UnlockUserEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple11<BigInteger, String, String, String, List<BigInteger>, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getMarket(BigInteger marketKey) {
        final Function function = new Function(FUNC_GETMARKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple11<BigInteger, String, String, String, List<BigInteger>, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple11<BigInteger, String, String, String, List<BigInteger>, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple11<BigInteger, String, String, String, List<BigInteger>, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple11<BigInteger, String, String, String, List<BigInteger>, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                convertToNative((List<Uint256>) results.get(4).getValue()), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue(), 
                                (BigInteger) results.get(9).getValue(), 
                                (BigInteger) results.get(10).getValue());
                    }
                });
    }

    public RemoteCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> getMarketFee(BigInteger marketKey) {
        final Function function = new Function(FUNC_GETMARKETFEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<Tuple3<BigInteger, BigInteger, List<BigInteger>>> getAnswer(BigInteger answerKey) {
        final Function function = new Function(FUNC_GETANSWER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(answerKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple3<BigInteger, BigInteger, List<BigInteger>>>(
                new Callable<Tuple3<BigInteger, BigInteger, List<BigInteger>>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        System.out.println(results);
                        return new Tuple3<BigInteger, BigInteger, List<BigInteger>>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                convertToNative((List<Uint256>) results.get(2).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple6<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger>> getBetting(BigInteger bettingKey) {
        final Function function = new Function(FUNC_GETBETTING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(bettingKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple6<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger>>(
                new Callable<Tuple6<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<Tuple4<String, String, String, String>> getAccounts() {
        final Function function = new Function(FUNC_GETACCOUNTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple4<String, String, String, String>>(
                new Callable<Tuple4<String, String, String, String>>() {
                    @Override
                    public Tuple4<String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> availableReceiveTokens(BigInteger marketKey, BigInteger bettingKey) {
        final Function function = new Function(FUNC_AVAILABLERECEIVETOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey), 
                new org.web3j.abi.datatypes.generated.Uint256(bettingKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> receiveToken(BigInteger marketKey, BigInteger bettingKey) {
        final Function function = new Function(
                FUNC_RECEIVETOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey), 
                new org.web3j.abi.datatypes.generated.Uint256(bettingKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isRetrievable(BigInteger marketKey) {
        final Function function = new Function(FUNC_ISRETRIEVABLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> retrieveTokens(BigInteger marketKey) {
        final Function function = new Function(
                FUNC_RETRIEVETOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> finishMarket(BigInteger marketKey) {
        final Function function = new Function(
                FUNC_FINISHMARKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> successMarket(BigInteger marketKey, BigInteger answerKey) {
        final Function function = new Function(
                FUNC_SUCCESSMARKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey), 
                new org.web3j.abi.datatypes.generated.Uint256(answerKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> adjournMarket(BigInteger marketKey) {
        final Function function = new Function(
                FUNC_ADJOURNMARKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> setAccount(String key, String account) {
        final Function function = new Function(
                FUNC_SETACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(key), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> bet(BigInteger marketKey, BigInteger answerKey, BigInteger bettingKey, BigInteger tokens) {
        final Function function = new Function(
                FUNC_BET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey), 
                new org.web3j.abi.datatypes.generated.Uint256(answerKey), 
                new org.web3j.abi.datatypes.generated.Uint256(bettingKey), 
                new org.web3j.abi.datatypes.generated.Uint256(tokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> availableBet(BigInteger marketKey, BigInteger answerKey, BigInteger bettingKey, BigInteger tokens) {
        final Function function = new Function(FUNC_AVAILABLEBET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey), 
                new org.web3j.abi.datatypes.generated.Uint256(answerKey), 
                new org.web3j.abi.datatypes.generated.Uint256(bettingKey), 
                new org.web3j.abi.datatypes.generated.Uint256(tokens)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> draftMarket(BigInteger marketKey, String creator, String title, BigInteger creatorFee, BigInteger creatorFeePercentage, BigInteger cojamFeePercentage, BigInteger charityFeePercentage) {
        final Function function = new Function(
                FUNC_DRAFTMARKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey), 
                new org.web3j.abi.datatypes.Address(creator), 
                new org.web3j.abi.datatypes.Utf8String(title), 
                new org.web3j.abi.datatypes.generated.Uint256(creatorFee), 
                new org.web3j.abi.datatypes.generated.Uint256(creatorFeePercentage), 
                new org.web3j.abi.datatypes.generated.Uint256(cojamFeePercentage), 
                new org.web3j.abi.datatypes.generated.Uint256(charityFeePercentage)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> approveMarket(BigInteger marketKey) {
        final Function function = new Function(
                FUNC_APPROVEMARKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> addAnswerKeys(BigInteger marketKey, List<BigInteger> answerKeys) {
        final Function function = new Function(
                FUNC_ADDANSWERKEYS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(marketKey), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(answerKeys, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isLock(String target) {
        final Function function = new Function(FUNC_ISLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(target)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> lock(List<String> targets) {
        final Function function = new Function(
                FUNC_LOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<KlayTransactionReceipt.TransactionReceipt> unlock(List<String> targets) {
        final Function function = new Function(
                FUNC_UNLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static CojamMarket load(String contractAddress, Caver caver, KlayCredentials credentials, int chainId, ContractGasProvider contractGasProvider) {
        return new CojamMarket(contractAddress, caver, credentials, chainId, contractGasProvider);
    }

    public static CojamMarket load(String contractAddress, Caver caver, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CojamMarket(contractAddress, caver, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CojamMarket> deploy(Caver caver, KlayCredentials credentials, int chainId, ContractGasProvider contractGasProvider, String token) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(token)));
        return deployRemoteCall(CojamMarket.class, caver, credentials, chainId, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CojamMarket> deploy(Caver caver, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String token) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(token)));
        return deployRemoteCall(CojamMarket.class, caver, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class AddAnswerKeysEventResponse {
        public KlayLogs.Log log;

        public BigInteger market;

        public List<BigInteger> answerKeys;
    }

    public static class AdjournMarketEventResponse {
        public KlayLogs.Log log;

        public BigInteger market;
    }

    public static class ApproveMarketEventResponse {
        public KlayLogs.Log log;

        public BigInteger market;
    }

    public static class BetEventResponse {
        public KlayLogs.Log log;

        public BigInteger market;

        public BigInteger answer;

        public BigInteger betting;

        public BigInteger tokens;
    }

    public static class DraftMarketEventResponse {
        public KlayLogs.Log log;

        public BigInteger market;

        public String title;

        public String creator;

        public BigInteger creatorFee;

        public BigInteger creatorFeePercentage;

        public BigInteger cojamFeePercentage;

        public BigInteger charityFeePercentage;
    }

    public static class FinishMarketEventResponse {
        public KlayLogs.Log log;

        public BigInteger market;
    }

    public static class LockUserEventResponse {
        public KlayLogs.Log log;

        public String user;
    }

    public static class OwnershipTransferredEventResponse {
        public KlayLogs.Log log;

        public String currentOwner;

        public String newOwner;
    }

    public static class RetrievedMarketEventResponse {
        public KlayLogs.Log log;

        public BigInteger market;

        public BigInteger amount;
    }

    public static class SetAccountEventResponse {
        public KlayLogs.Log log;

        public String key;

        public String account;
    }

    public static class SuccessMarketEventResponse {
        public KlayLogs.Log log;

        public BigInteger market;

        public BigInteger answer;

        public BigInteger creatorFee;

        public BigInteger cojamFee;

        public BigInteger charityFee;

        public BigInteger remains;
    }

    public static class TokenReceivedEventResponse {
        public KlayLogs.Log log;

        public String receiver;

        public BigInteger market;

        public BigInteger betting;

        public BigInteger received;
    }

    public static class UnlockUserEventResponse {
        public KlayLogs.Log log;

        public String user;
    }
}
